name: Build Wheels

on: [push, pull_request]


jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.10', '3.9', '3.8', '3.7']
    container: quay.io/pypa/manylinux2014_x86_64
    steps:
      - uses: actions/checkout@v2

      - name: Add GitHub CLI repository
        run: |
          yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
      
      - name: Install GitHub CLI
        run: |
          yum install -y gh

      - name: Create Release
        if: matrix.python-version == '3.9'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PAT_SECRET }}
        with:
          tag_name: 'secondattempt'
          release_name: 'this is a test'
          draft: false
          prerelease: false
         
      - name: Install wget
        run: yum install -y wget
      - name: Set Python-Version-Dash
        run: |
          echo "PYTHON_VERSION_DASH=$(echo '${{ matrix.python-version }}' | tr '.' '-')" >> $GITHUB_ENV
      
      - name: Print Python-Version-Dash
        run: echo "this $PYTHON_VERSION_DASH"

      - name: Install Anaconda
        run: |
          wget https://repo.anaconda.com/archive/Anaconda3-2022.10-Linux-x86_64.sh
          bash Anaconda3-2022.10-Linux-x86_64.sh -b -p $HOME/anaconda3
          echo "$HOME/anaconda3/bin" >> $GITHUB_PATH
      - name: Create Conda environment
        run: |
          source $HOME/anaconda3/etc/profile.d/conda.sh
          conda create -p ~/install/acond10 python=${{ matrix.python-version }} -y
          source $HOME/anaconda3/etc/profile.d/conda.sh
          conda activate ~/install/acond10
          conda install -y astunparse numpy ninja pyyaml setuptools cmake cffi typing_extensions future six requests dataclasses
          conda install -y mkl mkl-include
          conda install -c pytorch magma-cuda118

      - name: Which Python
        run: |
          ~/install/acond10/bin/python --version

      - name: Install Cuda
        run: |
          yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo
          yum clean all
          yum -y install cuda-compiler-11-8.x86_64 cuda-libraries-11-8.x86_64 cuda-libraries-devel-11-8.x86_64
          export PATH="/usr/local/cuda/bin:${PATH}"
          export CUDA_HOME=/usr/local/cuda
          export CUDA_ROOT=/usr/local/cuda
          export CUDA_PATH=/usr/local/cuda
          export CUDADIR=/usr/local/cuda
          export LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

      - name: Install torch
        run: |
          mkdir ~/github
          cd ~/github
          git clone --recursive https://github.com/pytorch/pytorch
          cd pytorch
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
          export CUDA_VERSION=11.8
          export CUDACXX=/usr/local/cuda-${CUDA_VERSION}/bin/nvcc
          export USE_ITT=0
          export USE_KINETO=0
          export BUILD_TEST=0
          export USE_MPI=0
          export BUILD_CAFFE2=0
          export BUILD_CAFFE2_OPS=0
          export USE_DISTRIBUTED=0
          export MAX_JOBS=2
          export TORCH_CUDA_ARCH_LIST="6.1;7.5;8.0;8.6"
      - name: Build wheel
        run: |
          cd ~/github/pytorch  # Ensure you are in the correct directory
          ~/install/acond10/bin/python setup.py bdist_wheel 
          cd ..
      - name: Find Wheel Files
        run: |
          echo "PYTHON_VERSION_DASH: $PYTHON_VERSION_DASH"
          echo "Searching for wheel files in ~/github..."
          find ~/github -name '*.whl'
          mkdir -p ../artifacts-$PYTHON_VERSION_DASH
          find ~/github -name '*.whl' -exec cp {} ../artifacts-$PYTHON_VERSION_DASH \;
          echo "Files in artifacts directory:"
          ls -l ../artifacts-$PYTHON_VERSION_DASH
          echo "Full path of artifacts directory:"
          ARTIFACTS_DIR=$(realpath ../artifacts-$PYTHON_VERSION_DASH)
          echo "ARTIFACTS_DIR=$ARTIFACTS_DIR" >> $GITHUB_ENV
  
      - name: Upload assets
        run: |
          for filename in ${{ env.ARTIFACTS_DIR }}/*; do
            echo "Uploading $filename"
            gh release upload 'secondattempt' "$filename" --clobber --repo ${{ github.repository }}
          done
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PAT_SECRET }}


          

